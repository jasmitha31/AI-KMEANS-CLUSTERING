{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\n\ndf = pd.read_csv('Mall_Customers.csv')\ndf.head()\ndf.shape\n\nX = df[['Annual Income (k$)', 'Spending Score (1-100)']]\n\n# Using the elbow method to find the optimal number of clusters\n# wcss = []\n# for i in range(1, 11):\n# kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10,\nrandom_state=42)\n# kmeans.fit(X)\n# wcss.append(kmeans.inertia_)\n\n# # Plotting the elbow method result\n# plt.figure(figsize=(10, 6))\n# plt.plot(range(1, 11), wcss, marker='o')\n# plt.title('Elbow Method')\n# plt.xlabel('Number of clusters')\n# plt.ylabel('WCSS')\n# plt.show()\n\n# Applying KMeans to the dataset\nclusters = 5 # This is optimal to find using elbow method\nkmeans = KMeans(n_clusters=clusters, init='k-means++', max_iter=300, n_init=10,\nrandom_state=42)\ny_kmeans = kmeans.fit_predict(X)\n\n# Adding the cluster to the original dataframe\ndf['Cluster'] = y_kmeans\n\n# Visualizing the clusters\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', data=df,\npalette='viridis')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red',\nlabel='Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()\n\ncentroids = kmeans.cluster_centers_\nprint(\"Cluster centroids:\")\nprint(centroids)\n\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]}]}